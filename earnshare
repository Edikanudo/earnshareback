require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const morgan = require('morgan');
const swaggerUi = require('swagger-ui-express');
const swaggerJsDoc = require('swagger-jsdoc');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');

// MongoDB Schemas
const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true, index: true },
  password: String,
  role: { type: String, default: 'user' },
});

const platformSchema = new mongoose.Schema({
  name: String,
  description: String,
  niches: [String],
  commissionRate: String,
  apiUrl: String,
  joinSteps: [String],
});

const affiliateLinkSchema = new mongoose.Schema({
  url: {
    type: String,
    required: true,
    validate: {
      validator: function(v) {
        return /^(ftp|http|https):\/\/[^ "]+$/.test(v);
      },
      message: props => ${props.value} is not a valid URL!
    }
  },
  platform: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Platform',
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
});

const performanceMetricSchema = new mongoose.Schema({
  affiliateLinkId: { type: mongoose.Schema.Types.ObjectId, ref: 'AffiliateLink' },
  clicks: { type: Number, default: 0 },
  conversions: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now },
});

const User = mongoose.model('User ', userSchema);
const Platform = mongoose.model('Platform', platformSchema);
const AffiliateLink = mongoose.model('AffiliateLink', affiliateLinkSchema);
const PerformanceMetric = mongoose.model('PerformanceMetric', performanceMetricSchema);

// Error Handling Middleware
const errorHandler = (err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).json({
    success: false,
    message: err.message || 'Internal Server Error',
  });
};

// JWT Authentication Middleware
const authenticate = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ success: false, error: 'Access denied. No token provided.' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(400).json({ success: false, error: 'Invalid token.' });
  }
};

// Utility function for handling user registration and login
const handleUser Response = async (user, res, successMessage, errorMessage) => {
  try {
    await user.save();
    res.status(201).json({ success: true, message: successMessage });
  } catch (err) {
    if (err.code === 11000) {
      return res.status(400).json({ success: false, error: 'Email already exists.' });
    }
    res.status(500).json({ success: false, error: errorMessage });
  }
};

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(cors({ origin: process.env.CORS_ORIGIN || 'https://your-frontend-domain.com' }));
app.use(helmet());
app.use(morgan('combined'));

// Rate Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // 100 requests per window
  message: 'Too many requests, please try again later.',
});
app.use(limiter);

// Swagger Documentation
const swaggerOptions = {
  swaggerDefinition: {
    openapi: '3.0.0',
    info: {
      title: 'AI Affiliate Marketing Bot API',
      version: '1.0.0',
      description: 'API for managing affiliate platforms, links, and recommendations',
    },
  },
  apis: ['./*.js'], // Adjust the path based on your project structure
};
const swaggerDocs = swaggerJsDoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

// MongoDB Connection
mongoose
  .connect(process.env.M ONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// API Routes
app.post('/register', 
  body('name').notEmpty().withMessage('Name is required'),
  body('email').isEmail().withMessage('Valid email is required'),
  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters long'),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ success: false, errors: errors.array() });
    }
    
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword });
    handleUser Response(user, res, 'User  registered successfully', 'User  registration failed');
  }
);

app.post('/login', 
  body('email').isEmail().withMessage('Valid email is required'),
  body('password').notEmpty().withMessage('Password is required'),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ success: false, errors: errors.array() });
    }

    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(400).json({ success: false, error: 'Invalid email or password' });
    }

    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ success: true, token });
  }
);

app.post('/platform', authenticate, 
  body('name').notEmpty().withMessage('Platform name is required'),
  body('description').notEmpty().withMessage('Description is required'),
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ success: false, errors: errors.array() });
    }

    const { name, description, niches, commissionRate, apiUrl, joinSteps } = req.body;
    const platform = new Platform({ name, description, niches, commissionRate, apiUrl, joinSteps });
    try {
      await platform.save();
      res.status(201).json({ success: true, message: 'Platform created successfully' });
    } catch (err) {
      res.status(500).json({ success: false, error: 'Platform creation failed' });
    }
  }
);

app.get('/platforms', async (req, res) => {
  try {
    const platforms = await Platform.find();
    res.status(200).json({ success: true, platforms });
  } catch (err) {
    res.status(500).json({ success: false, error: 'Failed to retrieve platforms' });
  }
});

// Additional routes for updating and deleting platforms
app.put('/platform/:id', authenticate, async (req, res) => {
  const { id } = req.params;
  const updates = req.body;

  try {
    const platform = await Platform.findByIdAndUpdate(id, updates, { new: true });
    if (!platform) {
      return res.status(404).json({ success: false, error: 'Platform not found' });
    }
    res.status(200).json({ success: true, platform });
  } catch (err) {
    res.status(500).json({ success: false, error: 'Failed to update platform' });
  }
});

app.delete('/platform/:id', authenticate, async (req, res) => {
  const { id } = req.params;

  try {
    const platform = await Platform.findByIdAndDelete(id);
    if (!platform) {
      return res.status(404).json({ success: false, error: 'Platform not found' });
    }
    res.status(200).json({ success: true, message: 'Platform deleted successfully' });
  } catch (err) {
    res.status(500).json({ success: false, error: 'Failed to delete platform' });
  }
});

// Performance Metrics Route
app.post('/performance-metric', authenticate, async (req, res) => {
  const { affiliateLinkId, clicks, conversions } = req.body;
  const metric = new PerformanceMetric({ affiliateLinkId, clicks, conversions });
  
  try {
    await metric.save();
    res.status(201).json ({ success: true, message: 'Performance metric recorded successfully' });
  } catch (err) {
    res.status(500).json({ success: false, error: 'Failed to record performance metric' });
  }
});

// Error Handling Middleware
app.use(errorHandler);

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(Server is running on port ${PORT});
});
